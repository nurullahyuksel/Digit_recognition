# -*- coding: utf-8 -*-
"""mnist_digit_recognation_with_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WJLBbAVHAzTwPGFsYlrk_C0TAwcmfQm7

# Digit recognition with CNN architecture

**Digit recognition application with MNIST dataset**

Test loss : 0.034158
Test Accuracy : 0.990299
Train loss : 0.002505
Train Accuracy : 0.999100
"""

# Commented out IPython magic to ensure Python compatibility.
# connect to colab

from google.colab import drive 
drive.mount('/content/drive')
# %cd drive/
!ls

import os 
os.chdir("/content/drive/My Drive/CNN/rakam_tanima")
!pwd

# CPU control

from tensorflow.python.client import device_lib
device_lib.list_local_devices()

#importing

from __future__ import print_function
from tensorflow.keras.utils import to_categorical

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import load_model, Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras import backend as K

import matplotlib.pyplot as plt
import numpy as np

#Dataset loading

(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Visualizing

plt.figure(figsize=(14,7))
for i in range (10):
  plt.subplot(2,5,1+i)
  plt.imshow(x_train[i])
  plt.title(y_train[i])

# Data shape

print("x_train shape :",x_train.shape)
print("y_train shape :",y_train.shape)
print("x_test shape :",x_test.shape)
print("y_test shape :",y_test.shape)

#hyperparameters

batch_size= 128
num_classes= 10
epochs= 20

# Data shape

img_rows, img_cols= 28,28

x_train= x_train.reshape(x_train.shape[0], img_rows, img_cols, 1 )
x_test= x_test.reshape(x_test.shape[0], img_rows, img_cols, 1 )

y_train= to_categorical(y_train,num_classes)
y_test= to_categorical(y_test, num_classes)

print("x_train shape :",x_train.shape)
print("y_train shape :",y_train.shape)
print("x_test shape :",x_test.shape)
print("y_test shape :",y_test.shape)

# Input Shape

input_shape= x_train[0].shape
input_shape

# Model create

model= Sequential()

model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=input_shape))
 
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(num_classes, activation='softmax'))

model.summary()

# Compile

model.compile(loss= "categorical_crossentropy", optimizer="Adam", metrics=["accuracy"])

# Fitting

hist= model.fit(x_train, y_train,
                batch_size=batch_size,
                epochs= epochs,
                verbose= 1,
                validation_data=(x_test, y_test))

#visualize

plt.figure(figsize=(10,6))

plt.plot(hist.history["accuracy"], label= "train acc", color="g")
plt.plot(hist.history["val_accuracy"], label= "validation acc",color="r")
plt.legend()
plt.title("Model Accuracy")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.savefig('Accuracy.png')
plt.show()

plt.figure(figsize=(10,6))
plt.plot(hist.history["loss"], label= "train loss",color="g")
plt.plot(hist.history["val_loss"], label= "validation loss",color="r")
plt.legend()
plt.title("Model Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss(Cost)")
plt.savefig('loss.png')
plt.show()

#save
model.save("/mnist_model_20.h5")

# Train-Test score
score=model.evaluate(x_test, y_test, verbose=2)
score1=model.evaluate(x_train, y_train, verbose=2)
print("Test loss :", score[0])
print("Test Accuracy :", score[1] )
print("Train loss :", score1[0])
print("Train Accuracy :", score1[1] )

"""### Predict a random number from the dataset"""

# Save

model_test= model.save("save_models/mnist_model_20.h5")

# sample from test dataset

plt.imshow(test_image.reshape(28,28), cmap='gray', vmin=2, vmax=255)

# Reshaping, Predict

test_image= x_test[35]

test_image= test_image.reshape(1,28,28,1)

result= model.predict(test_image)
result= result.reshape(10,1)

plt.plot(result)

"""### Real world example"""

#loading test image

from PIL import Image
img = Image.open('/content/drive/My Drive/CNN/rakam_tanima/rakamlar/sekiz.jpg') #for example image size : 28x28x3
img1 = img.convert('L')  #convert a gray scale
img1= img1.resize((28, 28))

# Sizing for predict

real_image = np.expand_dims(img1, axis=-1)
real_image = real_image.reshape(1,28,28,1)
real_image.shape

#Predict 

results= model.predict(real_image)
results= results.reshape(10,1)

plt.plot(results)



